generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @unique @default(cuid())
  email                String   @unique
  name                 String
  profileImageSrc      String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  dockerHubAccessToken String?

  ownedProjects Project[]    @relation("OwnedProjects")
  projects      Project[]    @relation("ProjectMembers")
  userImages    UserImage[]
  repository    Repository[]
}

model UserImage {
  id        String   @id @unique @default(cuid())
  imageName String
  imageTag  String
  pushedAt  DateTime
  size      Float
  digest    String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  repository   Repository @relation(fields: [repositoryId], references: [id])
  repositoryId String     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, imageName, imageTag], name: "unique_image")
}

model Repository {
  id        String     @id @unique @default(cuid())
  name      String
  uri       String
  owner     User       @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userImage UserImage?
}

model Project {
  id          String  @id @unique @default(cuid())
  name        String
  description String?

  owner   User   @relation(fields: [ownerId], references: [id], name: "OwnedProjects")
  ownerId String

  members User[] @relation("ProjectMembers")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ProjectCost ProjectCost[]
}

model ProjectCost {
  id        String   @id @unique @default(cuid())
  cost      Float
  dueDate   DateTime
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model Service {
  id               String @id @unique @default(cuid())
  name             String
  imageRegistryUrl String

  publicIP   String
  publicPort Int

  serviceCredential          ServiceCredential[]
  serviceEnvironmentVariable ServiceEnvironmentVariable[]

  serviceConfiguration   ServiceConfiguration @relation(fields: [serviceConfigurationId], references: [id])
  serviceConfigurationId String               @unique

  @@unique([publicIP, publicPort], name: "unique_public_ip_port")
  @@index([name])
}

model ServiceEnvironmentVariable {
  id        String   @id @unique @default(cuid())
  key       String
  value     String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([serviceId, key], name: "unique_service_key")
}

model ServiceCredential {
  id        String   @id @unique @default(cuid())
  key       String
  value     String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([serviceId, key], name: "unique_service_key")
}

model ServiceConfiguration {
  id                String          @id @unique @default(cuid())
  computingOption   ComputingOption @relation(fields: [computingOptionId], references: [id])
  storageOption     StorageOption?  @relation(fields: [storageOptionId], references: [id])
  computingOptionId String
  storageOptionId   String?
  service           Service?
}

model ComputingOption {
  id                   String                 @id @unique @default(cuid())
  name                 String
  availableCPU         Float // Store as number of cores
  availableMemory      Float // Store as MB of memory
  costPerHour          Float // Store as Baht per hour
  serviceConfiguration ServiceConfiguration[]
}

model StorageOption {
  id                   String                 @id @unique @default(cuid())
  name                 String
  storageSize          Float // Store as GB
  costPerHour          Float // Store as Baht per hour
  serviceConfiguration ServiceConfiguration[]
}
